//https://oj.leetcode.com/problems/pascals-triangle/
// 10/2014, jssfy

#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    vector<vector<int> > generate(int numRows) {
    	vector<vector<int> > ret;

    	if(numRows<1)
    	{
    		return ret;
    	}
    	vector<int> vec(1, 1);
    	ret.push_back(vec);
    	for(int i = 1; i<numRows; ++i)
    	{
    		vector<int> temp;
    		ret.push_back(temp);
    		// generate ret[i] based on ret[i-1]
    		// ret[i] has  i+1 members
    		for(int j=0; j<=i; ++j)
    		{
    			if(j==0)
    			{
    				ret[i].push_back(ret[i-1][j]);
    			}
    			else if(j == i)
    			{
    				ret[i].push_back(ret[i-1][j-1]);
    			}
    			else
    			{
    				ret[i].push_back(ret[i-1][j] + ret[i-1][j-1]);
    			}
    		}
    	}     
    	return ret;   
    }
};

int main()
{
	Solution sol;
	vector<vector<int> > ret = sol.generate(5);
	// print for validation 
		std::cout << "[" << std::endl;
	for(int i = 0; i<5; ++i)
	{
		std::cout << "[";
		for(int j = 0; j<=i; ++j)
		{
			std::cout << ret[i][j];
			if(j<i)
			{
				std::cout << ",";
			}			
		}
		std::cout << "]";
		if(i<5-1) 
		{
			std::cout << ",";
		}
		std::cout << std::endl;
	}
		std::cout << "]";

	return 0;
}
